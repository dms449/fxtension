plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.7'
  id 'java-library'
  id 'org.beryx.jlink' version '2.10.2'
}


// Java version required
//sourceCompatibility = 1.12

/*** CONFIGURATION SECTION ***/
ext {
    // FxExtension Version Number
    //   The version number is preferentially obtained from git
    //   tags, where available. If the information cannot be
    //   retrieved from Git, this version will be used instead.
    //
    //   Version numbers are semantic and are formatted
    //   MAJOR.MINOR.PATCH.
    fxtensionsVersion = '0.5.0'

    // default locations for external java libs
//    String osName = System.getProperty("os.name").toLowerCase()
    defaultDependencyDirs = "~/JavaLibs"

    // the repo location for external dependencies can be provided with the command line argument -Prepo=...
    // Otherwise it will default to the above locations
    localRepo = project.hasProperty("repo") ? project.property("repo") : defaultDependencyDirs
}


archivesBaseName = 'fxtensions'
version = git_describe()

// Define a local directory with java jars to use as a mavenLocal repo
repositories {
    mavenCentral()

    // For offline development
    flatDir {
        dirs project.property("localRepo")
    }
}


sourceSets {
//    generated {
//        java.srcDir "${buildDir}/generated/"
//    }
}

javafx {
    version = "12.0.1"
    modules = [ 'javafx.controls','javafx.fxml', 'javafx.graphics']
}

dependencies{
//    testImplementation name: 'hamcrest-all', version:'1.3'
    testImplementation name: 'junit', version:'4.12'

    //
    implementation "javax.xml.bind:jaxb-api:2.3.1"
//    implementation "com.sun.xml.bind:jaxb-core:2.2.11"
//    implementation "com.sun.xml.bind:jaxb-impl:2.2.11"
//    implementation "javax.activation:activation:1.1.1"
//    api sourceSets.generated.output.classesDirs
}


jlink {
    launcher {
        name = 'hellofx'
    }
}

/**
 * Task: Generate Java class with version information
 */
task generateSources {
    inputs.property "version", project.version
    outputs.dir "$buildDir/generated"

    doFirst {
        def versionFile = file("$buildDir/generated/dms/fxtensions/fxtensionsVersion.java")
        versionFile.parentFile.mkdirs()
        versionFile.text =
                """
    package dms.fxtensions;

    public class fxtensionsVersion {
      public static String getVersion() {
        return "$project.version";
      }
    }
    """
    }
}

// Always generate sources first
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Specification-Title': archivesBaseName,
                'Implementation-Version': version,
                'Implementation-Vendor': 'U.S. Army AMRDEC',
                'Assembly-Date': new java.util.Date().toString()
    }
    from {
        configurations.compileClasspath.collect {it.isDirectory() ? it :zipTree(it)}
    }
}



/**
 * Returns the git description of the software build.
 * If git is not found, then the fallback version is used instead
 * @return
 */
def git_describe() {
    def git_description = "${fxtensionsVersion}";
    try {
        git_description = "git -C \"${projectDir}\" describe --long --always HEAD".execute().text.trim()
    } catch (java.lang.Exception e) {
        /// do nothing
    }
    git_description
}
